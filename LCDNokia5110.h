#include <Arduino.h>
#include <SPI.h>

/*
* 	Nokia 5100, 5110, 3310 LCD display Arduino library
* 
* 	Details on: gameinstance.com/post/
*/
class LCDNokia5110 {
	
	public:
	
		/// display width in pixels
		static const unsigned char WIDTH = 84;
		/// display height in pixels
		static const unsigned char HEIGHT = 48;
		/// command code
		static const unsigned char COMMAND = 0;
		/// data code
		static const unsigned char DATA = 1;
		/// white
		static const unsigned char WHITE = 0;
		/// black
		static const unsigned char BLACK = 1;
		
		/// default constructor
		LCDNokia5110();
		/// constructor
		LCDNokia5110(
			unsigned char scePin, 
			unsigned char rstPin, 
			unsigned char dcPin, 
			unsigned char sdinPin, 
			unsigned char sclkPin, 
			unsigned char ledPin);
		
		/// configures the display pins
		void Config(unsigned char scePin, 
			unsigned char rstPin, 
			unsigned char dcPin, 
			unsigned char sdinPin, 
			unsigned char sclkPin, 
			unsigned char ledPin);
		/// draws a point at the given coordinates
		void Point(int x, int y, bool black = true);
		/// draws a line between (x0, y0) and (x1, y1) with the given color;
		/// logic from SparkFun ColorLCDShield library
		void Line(int x0, int y0, int x1, int y1, bool black = true);
		/// draws a rectange from (x0, y0) to (x1, y1) that can
		/// be filled with the given color;
		/// logic from SparkFun ColorLCDShield library
		void Rect(int x0, int y0, int x1, int y1, bool fill, bool black);
		/// draws a circle with the given radius, centered in (x, y), 
		/// with the given color and radius;
		/// logic from SparkFun ColorLCDShield library
		void Circle(int x, int y, int radius, bool black, int thickness);
		/// draws a char at (x, y) with the given color
		void Char(char character, int x, int y, bool black);
		/// draws a string
		void Text(String s, int x, int y, bool black);
		/// draws a string of chars;
		/// logic from SparkFun ColorLCDShield library
		void Text(const char * dString, int x, int y, bool black);
		/// draws a bitmap on the entire screen
		void Bitmap(char * bitArray);
		/// fill the display with the given color
		void Fill(bool black);
		/// sends the cursor to a given (x, y) location
		void Goto(int x, int y);
		/// pushes the graphic content onto the display
		void Update();
		/// sets the contrast to a value between 0 and 127
		void Contrast(unsigned char contrast);
		/// inverts the color of the graphics on display
		void Invert();
		/// writes data into the display's memory
		void Write(unsigned char command, unsigned char data);
		/// turns on or off the LED light
		void Light(bool bOn = true);
		/// initiates the display
		void Start();
		
		
	private:
	
		/// chip select pin
		unsigned char m_SCEPin;
		/// reset pin
		unsigned char m_RSTPin;
		/// data/command pin
		unsigned char m_DCPin;
		/// selial data-in pin
		unsigned char m_SDINPin;
		/// serial clock pin
		unsigned char m_SCLKPin;
		/// backlight LED pin
		unsigned char m_LEDPin;
		/*	Stores a buffer representation of the
		*	pixels on our display. There are 504 total bits in this array,
		*	same as how many pixels there are on a 84 x 48 display.
		*
		*	Each byte in this array covers a 8-pixel vertical block on the 
		*	display. Each successive byte covers the next 8-pixel column over
		*	until you reach the right-edge of the display and step down 8 rows.
		*
		*	To update the display, we first have to write to this array, then
		*	call the updateDisplay() function, which sends this whole array
		*	to the PCD8544.
		*
		*	Because the PCD8544 won't let us write individual pixels at a 
		*	time, this is how we can make targeted changes to the display. 
		*/
		unsigned char m_DisplayMap[WIDTH * HEIGHT / 8];
		/* Font table:
		* This table contains the hex values that represent pixels for a
		* font that is 5 pixels wide and 8 pixels high. Each byte in a row
		* represents one, 8-pixel, vertical column of a character. 5 bytes
		* per character. 
		*/
		unsigned char ASCII[100][5] = {
			  // First 32 characters (0x00-0x19) are ignored. These are
			  // non-displayable, control characters.
  			   {0x00, 0x0c, 0x12, 0x12, 0x0c} // 0x1d Degree sign
			  ,{0x7e, 0x43, 0x41, 0x43, 0x7e} // 0x1e Battery sign
			  ,{0x7f, 0x49, 0x7f, 0x49, 0x7f} // 0x1f Panel sign
			  // displayable chars
			  ,{0x00, 0x00, 0x00, 0x00, 0x00} // 0x20  
			  ,{0x00, 0x00, 0x5f, 0x00, 0x00} // 0x21 !
			  ,{0x00, 0x07, 0x00, 0x07, 0x00} // 0x22 "
			  ,{0x14, 0x7f, 0x14, 0x7f, 0x14} // 0x23 #
			  ,{0x24, 0x2a, 0x7f, 0x2a, 0x12} // 0x24 $
			  ,{0x23, 0x13, 0x08, 0x64, 0x62} // 0x25 %
			  ,{0x36, 0x49, 0x55, 0x22, 0x50} // 0x26 &
			  ,{0x00, 0x05, 0x03, 0x00, 0x00} // 0x27 '
			  ,{0x00, 0x1c, 0x22, 0x41, 0x00} // 0x28 (
			  ,{0x00, 0x41, 0x22, 0x1c, 0x00} // 0x29 )
			  ,{0x14, 0x08, 0x3e, 0x08, 0x14} // 0x2a *
			  ,{0x08, 0x08, 0x3e, 0x08, 0x08} // 0x2b +
			  ,{0x00, 0x50, 0x30, 0x00, 0x00} // 0x2c ,
			  ,{0x08, 0x08, 0x08, 0x08, 0x08} // 0x2d -
			  ,{0x00, 0x60, 0x60, 0x00, 0x00} // 0x2e .
			  ,{0x20, 0x10, 0x08, 0x04, 0x02} // 0x2f /
			  ,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 0x30 0
			  ,{0x00, 0x42, 0x7f, 0x40, 0x00} // 0x31 1
			  ,{0x42, 0x61, 0x51, 0x49, 0x46} // 0x32 2
			  ,{0x21, 0x41, 0x45, 0x4b, 0x31} // 0x33 3
			  ,{0x18, 0x14, 0x12, 0x7f, 0x10} // 0x34 4
			  ,{0x27, 0x45, 0x45, 0x45, 0x39} // 0x35 5
			  ,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 0x36 6
			  ,{0x01, 0x71, 0x09, 0x05, 0x03} // 0x37 7
			  ,{0x36, 0x49, 0x49, 0x49, 0x36} // 0x38 8
			  ,{0x06, 0x49, 0x49, 0x29, 0x1e} // 0x39 9
			  ,{0x00, 0x36, 0x36, 0x00, 0x00} // 0x3a :
			  ,{0x00, 0x56, 0x36, 0x00, 0x00} // 0x3b ;
			  ,{0x08, 0x14, 0x22, 0x41, 0x00} // 0x3c <
			  ,{0x14, 0x14, 0x14, 0x14, 0x14} // 0x3d =
			  ,{0x00, 0x41, 0x22, 0x14, 0x08} // 0x3e >
			  ,{0x02, 0x01, 0x51, 0x09, 0x06} // 0x3f ?
			  ,{0x32, 0x49, 0x79, 0x41, 0x3e} // 0x40 @
			  ,{0x7e, 0x11, 0x11, 0x11, 0x7e} // 0x41 A
			  ,{0x7f, 0x49, 0x49, 0x49, 0x36} // 0x42 B
			  ,{0x3e, 0x41, 0x41, 0x41, 0x22} // 0x43 C
			  ,{0x7f, 0x41, 0x41, 0x22, 0x1c} // 0x44 D
			  ,{0x7f, 0x49, 0x49, 0x49, 0x41} // 0x45 E
			  ,{0x7f, 0x09, 0x09, 0x09, 0x01} // 0x46 F
			  ,{0x3e, 0x41, 0x49, 0x49, 0x7a} // 0x47 G
			  ,{0x7f, 0x08, 0x08, 0x08, 0x7f} // 0x48 H
			  ,{0x00, 0x41, 0x7f, 0x41, 0x00} // 0x49 I
			  ,{0x20, 0x40, 0x41, 0x3f, 0x01} // 0x4a J
			  ,{0x7f, 0x08, 0x14, 0x22, 0x41} // 0x4b K
			  ,{0x7f, 0x40, 0x40, 0x40, 0x40} // 0x4c L
			  ,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // 0x4d M
			  ,{0x7f, 0x04, 0x08, 0x10, 0x7f} // 0x4e N
			  ,{0x3e, 0x41, 0x41, 0x41, 0x3e} // 0x4f O
			  ,{0x7f, 0x09, 0x09, 0x09, 0x06} // 0x50 P
			  ,{0x3e, 0x41, 0x51, 0x21, 0x5e} // 0x51 Q
			  ,{0x7f, 0x09, 0x19, 0x29, 0x46} // 0x52 R
			  ,{0x46, 0x49, 0x49, 0x49, 0x31} // 0x53 S
			  ,{0x01, 0x01, 0x7f, 0x01, 0x01} // 0x54 T
			  ,{0x3f, 0x40, 0x40, 0x40, 0x3f} // 0x55 U
			  ,{0x1f, 0x20, 0x40, 0x20, 0x1f} // 0x56 V
			  ,{0x3f, 0x40, 0x38, 0x40, 0x3f} // 0x57 W
			  ,{0x63, 0x14, 0x08, 0x14, 0x63} // 0x58 X
			  ,{0x07, 0x08, 0x70, 0x08, 0x07} // 0x59 Y
			  ,{0x61, 0x51, 0x49, 0x45, 0x43} // 0x5a Z
			  ,{0x00, 0x7f, 0x41, 0x41, 0x00} // 0x5b [
			  ,{0x02, 0x04, 0x08, 0x10, 0x20} // 0x5c \ 
			  ,{0x00, 0x41, 0x41, 0x7f, 0x00} // 0x5d ]
			  ,{0x00, 0x41, 0x41, 0x7f, 0x00} // 0x5d ]
			  ,{0x04, 0x02, 0x01, 0x02, 0x04} // 0x5e ^
			  ,{0x40, 0x40, 0x40, 0x40, 0x40} // 0x5f _
			  ,{0x00, 0x01, 0x02, 0x04, 0x00} // 0x60 `
			  ,{0x20, 0x54, 0x54, 0x54, 0x78} // 0x61 a
			  ,{0x7f, 0x48, 0x44, 0x44, 0x38} // 0x62 b
			  ,{0x38, 0x44, 0x44, 0x44, 0x20} // 0x63 c
			  ,{0x38, 0x44, 0x44, 0x48, 0x7f} // 0x64 d
			  ,{0x38, 0x54, 0x54, 0x54, 0x18} // 0x65 e
			  ,{0x08, 0x7e, 0x09, 0x01, 0x02} // 0x66 f
			  ,{0x0c, 0x52, 0x52, 0x52, 0x3e} // 0x67 g
			  ,{0x7f, 0x08, 0x04, 0x04, 0x78} // 0x68 h
			  ,{0x00, 0x44, 0x7d, 0x40, 0x00} // 0x69 i
			  ,{0x20, 0x40, 0x44, 0x3d, 0x00} // 0x6a j 
			  ,{0x7f, 0x10, 0x28, 0x44, 0x00} // 0x6b k
			  ,{0x00, 0x41, 0x7f, 0x40, 0x00} // 0x6c l
			  ,{0x7c, 0x04, 0x18, 0x04, 0x78} // 0x6d m
			  ,{0x7c, 0x08, 0x04, 0x04, 0x78} // 0x6e n
			  ,{0x38, 0x44, 0x44, 0x44, 0x38} // 0x6f o
			  ,{0x7c, 0x14, 0x14, 0x14, 0x08} // 0x70 p
			  ,{0x08, 0x14, 0x14, 0x18, 0x7c} // 0x71 q
			  ,{0x7c, 0x08, 0x04, 0x04, 0x08} // 0x72 r
			  ,{0x48, 0x54, 0x54, 0x54, 0x20} // 0x73 s
			  ,{0x04, 0x3f, 0x44, 0x40, 0x20} // 0x74 t
			  ,{0x3c, 0x40, 0x40, 0x20, 0x7c} // 0x75 u
			  ,{0x1c, 0x20, 0x40, 0x20, 0x1c} // 0x76 v
			  ,{0x3c, 0x40, 0x30, 0x40, 0x3c} // 0x77 w
			  ,{0x44, 0x28, 0x10, 0x28, 0x44} // 0x78 x
			  ,{0x0c, 0x50, 0x50, 0x50, 0x3c} // 0x79 y
			  ,{0x44, 0x64, 0x54, 0x4c, 0x44} // 0x7a z
			  ,{0x00, 0x08, 0x36, 0x41, 0x00} // 0x7b {
			  ,{0x00, 0x00, 0x7f, 0x00, 0x00} // 0x7c |
			  ,{0x00, 0x41, 0x36, 0x08, 0x00} // 0x7d }
			  ,{0x10, 0x08, 0x08, 0x10, 0x08} // 0x7e ~
			  ,{0x78, 0x46, 0x41, 0x46, 0x78} // 0x7f DEL
			};
};
